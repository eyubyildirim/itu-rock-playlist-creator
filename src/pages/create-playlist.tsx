import {
  GetServerSideProps,
  GetServerSidePropsContext,
  type NextPage,
} from "next";
import Head from "next/head";
import Link from "next/link";
import { useEffect, useState } from "react";
import Spotify from "spotify-web-api-js";
import { fetchSpotify } from "~/util/api/spotify";
import readExcel, { Row } from "read-excel-file";
import { BsSpotify } from "react-icons/bs";
import SpinnerOverlay from "~/components/Spinner/SpinnerOverlay";
const spotifyApi = new Spotify();

const Home: NextPage<{ code?: string }, {}> = ({ code }) => {
  const [name, setName] = useState("");
  const [songs, setSongs] = useState<Row[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    fetch("/parca_listesi.xlsx")
      .then((response) => response.blob())
      .then((blob) =>
        readExcel(blob, {
          sheet: "Dolan Şarkılar",
        })
      )
      .then((rows) => {
        setSongs(rows);
      });
  }, []);

  return (
    <>
      <Head>
        <title>ITU ROCK</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-[90vh] w-full items-center justify-center gap-y-2">
        {isLoading && <SpinnerOverlay />}
        <input
          type="text"
          className="rounded-md border p-2 transition-all"
          onChange={(e) => setName(e.target.value)}
          value={name}
          placeholder="Listedeki ismin"
        />
        <button
          disabled={isLoading}
          className="rounded-md border border-red-500 bg-white px-4 py-2 text-red-500 transition-all hover:bg-red-500 hover:text-white disabled:cursor-not-allowed disabled:opacity-50"
          onClick={async (e) => {
            e.preventDefault();
            setIsLoading(true);
            try {
              const tracksToAdd: string[] = [];

              songs.forEach((song, i) => {
                if (i === 0) return;
                song.forEach((cell, i) => {
                  if (!cell) return;
                  if (cell.toString().includes(name)) {
                    const songName = song[0]?.toString();
                    if (!songName) return;
                    tracksToAdd.push(songName.split("(")[0]?.trim() ?? "");
                  }
                });
              });

              const { id: userId } = await spotifyApi.getMe();

              const { id } = await spotifyApi.createPlaylist(userId, {
                name: name + " Gece Listesi",
              });

              const trackUris: string[] = [];

              for (const track of [...new Set(tracksToAdd)]) {
                const { tracks } = await spotifyApi.searchTracks(track);
                if (tracks.items.length === 0) continue;
                trackUris.push(tracks?.items[0]?.uri ?? "");
              }

              spotifyApi
                .addTracksToPlaylist(id, trackUris)
                .then((res) => console.log(res))
                .catch((err) => console.log(err));
            } finally {
              setIsLoading(false);
            }
          }}
        >
          Submit
        </button>
      </main>
    </>
  );
};

export async function getServerSideProps({
  query,
  req,
}: GetServerSidePropsContext) {
  console.log(query);
  // console.log(req);

  // const queryParamString = new URLSearchParams(query).toString();
  return {
    props: {
      code: query.code ?? null,
    },
  };
}

export default Home;
